<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>eVolveElectrical</name>
  </assembly>
  <members>
    <member name="T:eVolve.Core.Revit.Integration.API">
      <summary> Defines externally available API calls. </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.CreateButton(System.String,System.String,System.Type,System.Type,System.Windows.Media.ImageSource,System.String,System.String)">
      <summary>
             Returns a standard size Revit button which can be directly placed on <see cref="P:eVolve.Core.Revit.Integration.API.IntegrationRibbonPanel" />.
             <para>IMPORTANT NOTE: In order to use this the eVolve plugin must be loaded first. To practically achieve this your Revit
             '.addin' file must be after that of the eVolve product addin file alphabetically.</para></summary>
      <param name="buttonText"> The button text as it is to appear on the Revit toolbar. </param>
      <param name="executingAssemblyPath"> Full pathname of the executing assembly file.
                 <para>Typically: <c>System.Reflection.Assembly.GetExecutingAssembly().Location</c></para></param>
      <param name="publicType"> Class type of the <see cref="T:Autodesk.Revit.UI.IExternalCommand" /> implementation.
                 <para>Typically: <c>typeof(ClassNameWhichImplementsIExternalCommand)</c></para></param>
      <param name="availabilityType"> Class type of an <see cref="T:Autodesk.Revit.UI.IExternalCommandAvailability" /> implementation which controls
                 button availability.
                 <para>Typically: <c>typeof(ClassNameWhichImplementsIExternalCommandAvailability)</c></para></param>
      <param name="iconImage"> (Optional) The icon image to use. This is typically 32x32 at 96 DPI. If not provided a default logo
                 image is used. </param>
      <param name="tooltipText"> (Optional) Tooltip text. </param>
      <param name="helpLink"> (Optional) The help link URL which is opened on F1. </param>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.GetAsDataTable(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}},System.String,System.Boolean,Autodesk.Revit.DB.Document,System.String)">
      <summary>
             Converts the results of a call to <see cref="M:eVolve.Core.Revit.Integration.API.GetData(Autodesk.Revit.DB.Document,System.String,eVolve.Core.Revit.Integration.API.OnElementProcessed)" /> to a <see cref="T:System.Data.DataTable" />.
             <list type="bullet"><item>Each key of the inner lookup is used as the respective <see cref="T:System.Data.DataColumn" /> name with the type being
                 <c>string</c>.</item><item>The outer lookup key is stored in a <c>string</c><see cref="T:System.Data.DataColumn" /> named
                 <see cref="P:eVolve.Core.Revit.Integration.API.IdColumnName" />.</item></list>
             If <paramref name="data" /> does not contain any entries then an empty table is returned.
             </summary>
      <param name="data"> Data to be converted. This is expected to be the result of a call to a data retrieval method in this API. </param>
      <param name="name"> Name to assign to the generated <see cref="T:System.Data.DataTable" />. </param>
      <param name="isTyped"> (Optional) When <c>true</c> the <see cref="T:System.Data.DataColumn" />s will be created with the
                 specified field <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.Type" /> within the provided <paramref name="exportProfileName" />.
                 If a value does not match it's type (for example, <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.Type" /> is <see cref="F:eVolve.Core.Revit.Integration.DataType.Integer" />
                 and the value is "Hello", then <see cref="T:System.DBNull" /> is set as the value.
                 <para>When <c>false</c>, all columns are strings.</para></param>
      <param name="document"> (Optional) Only required when <paramref name="isTyped" /> is <c>true</c>, the Revit document which
                 sourced <paramref name="data" />. </param>
      <param name="exportProfileName"> (Optional) Only required when <paramref name="isTyped" /> is <c>true</c>, name of the <see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Export" />
                 profile used to source <paramref name="data" />. </param>
      <exception cref="T:System.ArgumentException"> Thrown when <paramref name="isTyped" /> is <c>true</c> and required parameters are
                 not provided. </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Thrown when <paramref name="exportProfileName" /> is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.GetData(Autodesk.Revit.DB.Document,System.String,eVolve.Core.Revit.Integration.API.OnElementProcessed)">
      <summary>
             Extracts data from <paramref name="document" /> via an <see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Export" /> profile.
             <para>Note that when <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.SelectionScope" /> of <paramref name="exportProfileName" /> is
             either <see cref="F:eVolve.Core.Revit.Integration.SelectionScope.View" /> or <see cref="F:eVolve.Core.Revit.Integration.SelectionScope.Selection" />, the current Revit window context is used,
             so it is expected that the provided <paramref name="document" /> is the active <see cref="T:Autodesk.Revit.DB.Document" /> within the
             current Revit window.</para></summary>
      <param name="document"> Revit document to query. </param>
      <param name="exportProfileName"> Name of the <see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Export" /> profile. Use <see cref="M:eVolve.Core.Revit.Integration.API.GetProfileNames(Autodesk.Revit.DB.Document,eVolve.Core.Revit.Integration.ProfileDirection,System.String,System.String)" />.
                 <para>An exception is thrown if this does not exist.</para></param>
      <param name="onElementProcessed"> Callback which will be invoked upon the processing completion of each resolved
                 <see cref="T:Autodesk.Revit.DB.Element" />. If this returns <see langword="false" /> then an exception is thrown.
                 <para>Provide <see langword="null" /> to ignore or if this is not needed.</para><para>Note that this is not called within a <see cref="T:Autodesk.Revit.DB.Transaction" />.</para></param>
      <remarks>
             The return is the same structure used by <see cref="M:eVolve.Core.Revit.Integration.API.WriteData(Autodesk.Revit.DB.Document,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}},System.Boolean,eVolve.Core.Revit.Integration.API.UnmappedFieldAction,System.String[]@,eVolve.Core.Revit.Integration.API.OnElementProcessed)" />.
             <para>It contains a lookup with each matching item's <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> as the outer key with the inner
             data being a lookup of each fully resolved <see cref="T:eVolve.Core.Revit.Integration.DataProfileFieldDefinition" />. The key for the inner lookup is the
             <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" /> and the value is the fully resolved/expanded
             <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ParameterName" /> value.</para><para>When <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.SpecialParameterName" /> values are used, it is possible that a single <see cref="T:Autodesk.Revit.DB.Element" />
             could produce multiple rows. When this occurs the respective key of the return modifies the <see cref="P:Autodesk.Revit.DB.Element.UniqueId" />
             value of the "extra" rows to include a suffix. Use the <see cref="M:eVolve.Core.Revit.Integration.API.GetUniqueId(System.String)" /> method to guarantee the appropriate <see cref="P:Autodesk.Revit.DB.Element.UniqueId" />
             is pulled for each respective entry.</para></remarks>
      <exception cref="T:System.OperationCanceledException"> Thrown when <paramref name="onElementProcessed" /> returns <see langword="false" />. </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Thrown when <paramref name="exportProfileName" /> is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
      <exception cref="T:System.PlatformNotSupportedException"> Thrown when <see cref="P:eVolve.Core.Revit.Framework.PowerShellProcessing.PowerShellEnabled" /> is <see langword="false" />
                 and a script attempts to run. </exception>
      <exception cref="T:System.TimeoutException"> Thrown when the user opts not to continue after <see cref="P:eVolve.Core.Revit.Framework.PowerShellProcessing.PowerShellExecutionLimit" />
                 is reached. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.GetData(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.Element},System.String,System.Boolean,eVolve.Core.Revit.Integration.API.OnElementProcessed)">
      <summary>
             Extracts the data defined in the provided <paramref name="exportProfileName" /> against only the specified items.
             <para>This will ignore <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.ExpansionOption" /> and (optionally) <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.SelectionFilter" />.</para></summary>
      <param name="elements"> Elements to limit the results to. It is expected these are contained within the same <see cref="T:Autodesk.Revit.DB.Document" />.</param>
      <param name="exportProfileName">
        <param name="exportProfileName"> Name of the <see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Export" /> profile. Use <see cref="M:eVolve.Core.Revit.Integration.API.GetProfileNames(Autodesk.Revit.DB.Document,eVolve.Core.Revit.Integration.ProfileDirection,System.String,System.String)" />.
                 <para>An exception is thrown if this does not exist.</para></param>
      </param>
      <param name="mustMatchFilter"> Specifies if only entries within the provided list which match the <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.SelectionFilter" />
                 defined in <paramref name="exportProfileName" /> are processed (<see langword="true" />) or if all <paramref name="elements" />
                 are processed, regardless (<see langword="false" />). </param>
      <param name="onElementProcessed">
        <param name="onElementProcessed"> Callback which will be invoked upon the processing completion of each resolved
                 <see cref="T:Autodesk.Revit.DB.Element" />. If this returns <see langword="false" /> then an exception is thrown.
                 <para>Provide <see langword="null" /> to ignore or if this is not needed.</para><para>Note that this is not called within a <see cref="T:Autodesk.Revit.DB.Transaction" />.</para></param>
      </param>
      <param name="document"> Revit document to query. </param>
      <remarks>
             The return is the same structure used by <see cref="M:eVolve.Core.Revit.Integration.API.WriteData(Autodesk.Revit.DB.Document,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}},System.Boolean,eVolve.Core.Revit.Integration.API.UnmappedFieldAction,System.String[]@,eVolve.Core.Revit.Integration.API.OnElementProcessed)" />.
             <para>It contains a lookup with each matching item's <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> as the outer key with the inner
             data being a lookup of each fully resolved <see cref="T:eVolve.Core.Revit.Integration.DataProfileFieldDefinition" />. The key for the inner lookup is the
             <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" /> and the value is the fully resolved/expanded
             <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ParameterName" /> value.</para><para>When <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.SpecialParameterName" /> values are used, it is possible that a single <see cref="T:Autodesk.Revit.DB.Element" />
             could produce multiple rows. When this occurs the respective key of the return modifies the <see cref="P:Autodesk.Revit.DB.Element.UniqueId" />
             value of the "extra" rows to include a suffix. Use the <see cref="M:eVolve.Core.Revit.Integration.API.GetUniqueId(System.String)" /> method to guarantee the appropriate <see cref="P:Autodesk.Revit.DB.Element.UniqueId" />
             is pulled for each respective entry.</para></remarks>
      <exception cref="T:System.OperationCanceledException"> Thrown when <paramref name="onElementProcessed" /> returns <see langword="false" />. </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Thrown when <paramref name="exportProfileName" /> is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
      <exception cref="T:System.PlatformNotSupportedException"> Thrown when <see cref="P:eVolve.Core.Revit.Framework.PowerShellProcessing.PowerShellEnabled" /> is <see langword="false" />
                 and a script attempts to run. </exception>
      <exception cref="T:System.TimeoutException"> Thrown when the user opts not to continue after <see cref="P:eVolve.Core.Revit.Framework.PowerShellProcessing.PowerShellExecutionLimit" />
                 is reached. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.GetData(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,System.String,System.Boolean,eVolve.Core.Revit.Integration.API.OnElementProcessed)">
      <summary>
             Extracts the data defined in the provided <paramref name="exportProfileName" /> against only the specified items.
             <para>This will ignore <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.ExpansionOption" /> and (optionally) <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.SelectionFilter" />.</para></summary>
      <param name="elementIds"> Elements to limit the results to. It is expected these are contained within the provided <paramref name="document" />.</param>
      <param name="document"> Revit model which contains the provided <paramref name="elementIds" />. </param>
      <param name="exportProfileName">
        <param name="exportProfileName"> Name of the <see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Export" /> profile. Use <see cref="M:eVolve.Core.Revit.Integration.API.GetProfileNames(Autodesk.Revit.DB.Document,eVolve.Core.Revit.Integration.ProfileDirection,System.String,System.String)" />.
                 <para>An exception is thrown if this does not exist.</para></param>
      </param>
      <param name="mustMatchFilter">
        <param name="mustMatchFilter"> Specifies if only entries within the provided list which match the <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.SelectionFilter" />
                 defined in <paramref name="exportProfileName" /> are processed (<see langword="true" />) or if all <paramref name="elements" />
                 are processed, regardless (<see langword="false" />). </param>
      </param>
      <param name="onElementProcessed">
        <param name="onElementProcessed"> Callback which will be invoked upon the processing completion of each resolved
                 <see cref="T:Autodesk.Revit.DB.Element" />. If this returns <see langword="false" /> then an exception is thrown.
                 <para>Provide <see langword="null" /> to ignore or if this is not needed.</para><para>Note that this is not called within a <see cref="T:Autodesk.Revit.DB.Transaction" />.</para></param>
      </param>
      <param name="elements"> Elements to limit the results to. It is expected these are contained within the same <see cref="T:Autodesk.Revit.DB.Document" />.</param>
      <remarks>
             The return is the same structure used by <see cref="M:eVolve.Core.Revit.Integration.API.WriteData(Autodesk.Revit.DB.Document,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}},System.Boolean,eVolve.Core.Revit.Integration.API.UnmappedFieldAction,System.String[]@,eVolve.Core.Revit.Integration.API.OnElementProcessed)" />.
             <para>It contains a lookup with each matching item's <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> as the outer key with the inner
             data being a lookup of each fully resolved <see cref="T:eVolve.Core.Revit.Integration.DataProfileFieldDefinition" />. The key for the inner lookup is the
             <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" /> and the value is the fully resolved/expanded
             <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ParameterName" /> value.</para><para>When <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.SpecialParameterName" /> values are used, it is possible that a single <see cref="T:Autodesk.Revit.DB.Element" />
             could produce multiple rows. When this occurs the respective key of the return modifies the <see cref="P:Autodesk.Revit.DB.Element.UniqueId" />
             value of the "extra" rows to include a suffix. Use the <see cref="M:eVolve.Core.Revit.Integration.API.GetUniqueId(System.String)" /> method to guarantee the appropriate <see cref="P:Autodesk.Revit.DB.Element.UniqueId" />
             is pulled for each respective entry.</para></remarks>
      <exception cref="T:System.OperationCanceledException"> Thrown when <paramref name="onElementProcessed" /> returns <see langword="false" />. </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Thrown when <paramref name="exportProfileName" /> is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
      <exception cref="T:System.PlatformNotSupportedException"> Thrown when <see cref="P:eVolve.Core.Revit.Framework.PowerShellProcessing.PowerShellEnabled" /> is <see langword="false" />
                 and a script attempts to run. </exception>
      <exception cref="T:System.TimeoutException"> Thrown when the user opts not to continue after <see cref="P:eVolve.Core.Revit.Framework.PowerShellProcessing.PowerShellExecutionLimit" />
                 is reached. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.GetFabAncillaryValue(Autodesk.Revit.DB.FabricationPart,Autodesk.Revit.DB.FabricationAncillaryUsage,System.String,System.Boolean,System.String)">
      <summary>
             Returns the resolved <paramref name="specialNameKey" /> on the provided <paramref name="ancillary" />. If a value cannot be
             resolved, <paramref name="defaultValue" /> is returned.
             </summary>
      <param name="fabPart"> Source which <paramref name="ancillary" /> is within. </param>
      <param name="ancillary"> Ancillary entry to process. </param>
      <param name="specialNameKey"> An entry from within <see cref="T:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys" /> where
                 <see cref="M:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.IsFabAncillaryKey(System.String)" /> is <c>true</c>. </param>
      <param name="useDisplayValue"> Whether to use the Revit Project Units format (<c>true</c>) or raw API value (<c>false</c>),
                 as applicable. </param>
      <param name="defaultValue"> (Optional) Value which is returned in situations where <paramref name="specialNameKey" /> is not
                 within <see cref="T:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys" />. </param>
      <remarks> Ancillaries are extracted via <see cref="M:Autodesk.Revit.DB.FabricationPart.GetPartAncillaryUsage" />. </remarks>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.GetParameter(Autodesk.Revit.DB.Document,System.String,System.String,System.String)">
      <summary>
             Gets the <see cref="T:Autodesk.Revit.DB.Parameter" /> which data is read from/written to.
             <para>This can be used to determine important information regarding the data including the data type it stores.</para></summary>
      <param name="document"> Revit document to query. </param>
      <param name="elementUniqueId">
        <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> for the <see cref="T:Autodesk.Revit.DB.Element" /> to get the
                 parameter information on. </param>
      <param name="importProfileName"> Name of the <see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Import" /> profile. Use
                 <see cref="M:eVolve.Core.Revit.Integration.API.GetProfileNames(Autodesk.Revit.DB.Document,eVolve.Core.Revit.Integration.ProfileDirection,System.String,System.String)" />. </param>
      <param name="columnName"> Name of the column. </param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Thrown when on of the following occurs:
                 <list type="bullet"><item><paramref name="importProfileName" /> is not found or unique.</item><item><paramref name="columnName" /> within <paramref name="importProfileName" /> is not found or unique.</item><item>An <see cref="T:Autodesk.Revit.DB.Element" /> with <paramref name="elementUniqueId" /> is not found.</item><item>A <see cref="T:Autodesk.Revit.DB.Parameter" /> mapped to <paramref name="columnName" /> is not found.</item></list></exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.GetProfileFieldNames(Autodesk.Revit.DB.Document,System.String,eVolve.Core.Revit.Integration.ProfileDirection)">
      <summary>
             Gets a list, in the defined order, of all field/column names within the <see cref="T:eVolve.Core.Revit.Integration.DataProfileFieldDefinition" /> matching the
             provided parameters.
             </summary>
      <param name="document"> Revit document containing <paramref name="profileName" />. </param>
      <param name="profileName"> Name of the profile returned from <see cref="M:eVolve.Core.Revit.Integration.API.GetProfileNames(Autodesk.Revit.DB.Document,eVolve.Core.Revit.Integration.ProfileDirection,System.String,System.String)" />. </param>
      <param name="direction"> The direction of the respective <paramref name="profileName" />. </param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Thrown when <paramref name="profileName" /> is not found or unique. </exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.GetProfileNames(Autodesk.Revit.DB.Document,eVolve.Core.Revit.Integration.ProfileDirection,System.String,System.String)">
      <summary>
             Returns the sorted names of all available <see cref="T:eVolve.Core.Revit.Integration.DataProfileDefinition" /> for the specified
             <paramref name="direction" />. If there are none available, an empty list returned.
             </summary>
      <param name="document"> Revit document to query. </param>
      <param name="direction"> The direction which <see cref="T:eVolve.Core.Revit.Integration.DataProfileDefinition" /> must be configured for. </param>
      <param name="featureId"> Identifier of a feature provided to <see cref="M:eVolve.Core.Revit.Integration.API.RegisterImplementingFeature(System.String,System.String)" /> or <see langword="null" />
                 if not registered.
                 <para>The return will be limited to <see cref="T:eVolve.Core.Revit.Integration.DataProfileDefinition" />s containing the provided value in its <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.FeatureIds" />
                 or containing no entries in <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.FeatureIds" /> at all.</para><para>To ignore this filter entirely, provide <see cref="P:eVolve.Core.Revit.Integration.API.IgnoreProfileNamesFeatureIdFilter" />.</para></param>
      <param name="selectionListId"> Identifier of a selection list provided to <see cref="M:eVolve.Core.Revit.Integration.API.RegisterFieldColumnNamesSelectionList(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})" />.
                 <para>If specified the return will be limited to only <see cref="T:eVolve.Core.Revit.Integration.DataProfileDefinition" />s which have this exact match
                 configured as its <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.ColumnNameSelectionList" />. Provide <see langword="null" /> to ignore.</para></param>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.GetUniqueId(System.String)">
      <summary>
             Gets the <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> from the provided <paramref name="keyValueFromGetData" />. This is safe to use
             for any key value even if it does not contain <see cref="P:eVolve.Core.Revit.Integration.API.UniqueIdSeparator" />.
             <para>If the provided <paramref name="keyValueFromGetData" /> does not contain a <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> then
             <c>null</c> is returned.</para></summary>
      <param name="keyValueFromGetData"> Key returned from one of the <c>GetData</c> methods. </param>
    </member>
    <member name="P:eVolve.Core.Revit.Integration.API.IdColumnName">
      <summary> Name of the outer lookup key <see cref="T:System.Data.DataColumn" /> generated by <see cref="M:eVolve.Core.Revit.Integration.API.GetAsDataTable(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}},System.String,System.Boolean,Autodesk.Revit.DB.Document,System.String)" />. </summary>
    </member>
    <member name="P:eVolve.Core.Revit.Integration.API.IgnoreProfileNamesFeatureIdFilter">
      <summary> Value to provide to <see cref="M:eVolve.Core.Revit.Integration.API.GetProfileNames(Autodesk.Revit.DB.Document,eVolve.Core.Revit.Integration.ProfileDirection,System.String,System.String)" /> to ignore the feature identifier filter. </summary>
    </member>
    <member name="P:eVolve.Core.Revit.Integration.API.IntegrationRibbonPanel">
      <summary>
            The Revit ribbon panel where external integrations using the platform reside. This allows consumers to place their Revit
            button within the same toolbar location.
            <para>IMPORTANT NOTE: In order to use this, your Revit '.addin' file must be after that of the eVolve product addin file
            alphabetically.</para></summary>
    </member>
    <member name="P:eVolve.Core.Revit.Integration.API.IsLicensed">
      <summary> Returns whether or not this product is licensed. </summary>
      <remarks> If <c>false</c> is returned then calls within the API may fail. </remarks>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.OpenDataProfilesDialog(Autodesk.Revit.DB.Document)">
      <summary> Opens the dialog used for editing <see cref="T:eVolve.Core.Revit.Integration.DataProfileDefinition" />s as a modal window. </summary>
      <param name="document"> Revit document containing the data to view. </param>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.RegisterFieldColumnNamesSelectionList(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
             Registers an entry which will be available for users to select when defining an <see cref="T:eVolve.Core.Revit.Integration.DataProfileDefinition" />. When the
             provided <paramref name="displayName" /> entry is selected, the respective <paramref name="fieldColumnNames" /> sources a list of
             predefined <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" /> values a user can pick when defining mappings which have the
             <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.ColumnNameSelectionList" /> set to <paramref name="id" />.
             </summary>
      <param name="id"> Unique key which identifies the selection set. </param>
      <param name="displayName"> Name of the selection set as it will be presented to users. </param>
      <param name="fieldColumnNames"> Set list of values which the user can pick from when mapping to
                 <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" />s. </param>
      <exception cref="T:System.ArgumentException"> Thrown when <paramref name="id" /> or <paramref name="displayName" /> does not have a
                 value. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.RegisterImplementingFeature(System.String,System.String)">
      <summary>
             Registers a feature that which will be available for users to select when defining an <see cref="T:eVolve.Core.Revit.Integration.DataProfileDefinition" />.
             </summary>
      <param name="id"> Unique key which identifies the feature. </param>
      <param name="name"> Name of the feature as it will be presented to users. </param>
      <exception cref="T:System.ArgumentException"> Thrown when <paramref name="id" /> or <paramref name="name" /> does not have a
                 value. </exception>
    </member>
    <member name="P:eVolve.Core.Revit.Integration.API.UniqueIdSeparator">
      <summary>
            For situations where multiple entries are created for a single <see cref="T:Autodesk.Revit.DB.Element" />, this is placed immediately
            after the <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> as a separator to create unique indexes.
            <para>Use <see cref="M:eVolve.Core.Revit.Integration.API.GetUniqueId(System.String)" /> to safely parse this value.</para></summary>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.UnregisterFieldColumnNamesSelectionList(System.String)">
      <summary>
             Removes an entry which was created by <see cref="M:eVolve.Core.Revit.Integration.API.RegisterFieldColumnNamesSelectionList(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})" /> such that the user can no longer
             select it.
             <para>Removing an entry will not change the <see cref="T:eVolve.Core.Revit.Integration.DataProfileFieldDefinition" />s of any existing
             <see cref="T:eVolve.Core.Revit.Integration.DataProfileDefinition" /> entries which have this value assigned to their
             <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.ColumnNameSelectionList" />.</para></summary>
      <param name="id"> Unique key of the selection set to be removed. If this does not exist, nothing happens. </param>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.UnregisterImplementingFeature(System.String)">
      <summary>
             Removes an entry which was created by <see cref="M:eVolve.Core.Revit.Integration.API.RegisterImplementingFeature(System.String,System.String)" /> such that the user can no longer select it.
             <para>Removing an entry will not change any existing <see cref="T:eVolve.Core.Revit.Integration.DataProfileDefinition" /> entries which have this value
             assigned as an entry within <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.FeatureIds" />.</para></summary>
      <param name="id"> Unique key of the feature to be removed. If this does not exist, nothing happens. </param>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.ViewData(System.Data.DataTable,System.Windows.Forms.IWin32Window,System.String,System.String,System.Boolean,System.Drawing.Icon,System.String)">
      <summary>
             Opens a modal dialog which displays the results of the provided <paramref name="table" /> within a grid and returns any
             entries which the user selects (as defined by <paramref name="showSelection" />). If no rows are selected or selection is not
             applicable, an empty list is returned.
             </summary>
      <param name="table"> Data to be displayed. This should be the result of a call to <see cref="M:eVolve.Core.Revit.Integration.API.GetAsDataTable(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}},System.String,System.Boolean,Autodesk.Revit.DB.Document,System.String)" />.
                 <para>If this is constucted manually, it must have a column named <see cref="P:eVolve.Core.Revit.Integration.API.IdColumnName" /> which contains the
                 <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> value of each respective row's source <see cref="T:Autodesk.Revit.DB.Element" />.</para></param>
      <param name="owner"> The owner of the dialog form. <c>null</c> can be provided. </param>
      <param name="title"> Dialog window title. </param>
      <param name="infoText"> Brief text which appears above the data grid. <c>null</c> can be provided if not applicable. </param>
      <param name="showSelection"> When <c>true</c> is provided, the user will be allowed select rows via a checkbox and
                 <see cref="P:Autodesk.Revit.DB.Element.UniqueId" />s of the respective selections within <paramref name="table" /> are returned. This
                 can be used to allow users to narrow selections from resulting data.
                 <para>If <c>false</c> is provided, the data is displayed with no selection options. This serves as a preview.</para></param>
      <param name="icon"> (Optional) If provided, this graphic is used as the dialog icon. Otherwise a default icon is used. </param>
      <param name="helplink"> (Optional) If provided, specifies the F1 help link which should be used for the dialog. </param>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.WriteData(Autodesk.Revit.DB.Document,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}},System.Boolean,eVolve.Core.Revit.Integration.API.UnmappedFieldAction,System.String[]@,eVolve.Core.Revit.Integration.API.OnElementProcessed)">
      <summary>
             Writes data to Revit <see cref="T:Autodesk.Revit.DB.Element" />s via an <see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Import" /> profile. Returns a count
             of the number of records processed.
             <para>Only <see cref="T:Autodesk.Revit.DB.Element" />s which match the source <see cref="P:eVolve.Core.Revit.Integration.DataProfileDefinition.SelectionFilter" />
             are processed.</para></summary>
      <param name="document"> Revit document to write data to. </param>
      <param name="importProfileName"> Name of the <see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Import" /> profile. Use
                 <see cref="M:eVolve.Core.Revit.Integration.API.GetProfileNames(Autodesk.Revit.DB.Document,eVolve.Core.Revit.Integration.ProfileDirection,System.String,System.String)" />.
                 <para>An exception is thrown if this does not exist.</para></param>
      <param name="data"> Data to be written to <paramref name="document" />. Only result entries from <paramref name="importProfileName" />
                 which are within <paramref name="document" /> are processed.
                 <para>This is the same structure used by <see cref="M:eVolve.Core.Revit.Integration.API.GetData(Autodesk.Revit.DB.Document,System.String,eVolve.Core.Revit.Integration.API.OnElementProcessed)" />. The outer lookup
                 key is the Revit <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> with the data being a mapping of data to be written to respective
                 parameters. The key for the inner lookup is the <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" /> and the value
                 contains the data to write to the respective <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ParameterName" />.</para><para>If the <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> does not exist, it is ignored (and will not be considered in the
                 return tally). However if the converted value type provided for
                 <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ParameterName" />
                 does not match that expected by the parameter then an exception will be thrown.</para></param>
      <param name="honorSelectionCriteria"> Specifies if only the <see cref="T:Autodesk.Revit.DB.Element" />s passing the criteria of
                 <paramref name="importProfileName" /> should be processed. If <c>false</c> is provided, all valid entries within
                 <paramref name="data" /> are processed, regardless. </param>
      <param name="unmappedFieldAction"> Action to take when an inner lookup key of <paramref name="data" />
                 (<see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" />) is not found or unique within
                 <paramref name="importProfileName" />. </param>
      <param name="missingFields"> [out] All inner lookup keys (<see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" />) which
                 were not found or unique during processing. This will always have a value regardless of the provided
                 <paramref name="unmappedFieldAction" />. </param>
      <param name="onElementProcessed"> Callback which will be invoked upon the processing completion of each matching
                 <see cref="T:Autodesk.Revit.DB.Element" />. If this returns <c>false</c> then an exception is thrown.
                 <para>Provide <c>null</c> to ignore or if this is not needed.</para><para>Note that this is called within a <see cref="T:Autodesk.Revit.DB.Transaction" />.</para></param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Thrown when one of the following occurs:
                 <list type="bullet"><item><paramref name="importProfileName" /> is not found.</item><item>A key from the 'inner' lookup of <paramref name="data" /> (the
                 <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" />) is not found or unique within
                 <paramref name="importProfileName" /> and <paramref name="unmappedFieldAction" /> is
                 <see cref="F:eVolve.Core.Revit.Integration.API.UnmappedFieldAction.Error" />.</item></list></exception>
      <exception cref="T:System.OperationCanceledException"> Thrown when <paramref name="onElementProcessed" /> returns <c>false</c>. </exception>
      <exception cref="T:System.FormatException"> Thrown when the value for a
                 <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ParameterName" /> does not match the type expected. </exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
      <exception cref="T:System.PlatformNotSupportedException"> Thrown when <see cref="P:eVolve.Core.Revit.Framework.PowerShellProcessing.PowerShellEnabled" /> is <c>false</c>
                 and a script attempts to run. </exception>
      <exception cref="T:System.TimeoutException"> Thrown when the user opts not to continue after <see cref="P:eVolve.Core.Revit.Framework.PowerShellProcessing.PowerShellExecutionLimit" />
                 is reached. </exception>
    </member>
    <member name="T:eVolve.Core.Revit.Integration.API.OnElementProcessed">
      <summary>
             Defines a method which should be executed upon processing of an <see cref="T:Autodesk.Revit.DB.Element" />. If this method returns
             <c>false</c> then it signals processing should be aborted.
             </summary>
      <param name="totalElements"> The total elements being processed. </param>
      <param name="recordNumber"> The current record number being processed. This will be between 1 and
                 <paramref name="totalElements" />. </param>
      <param name="element"> The just finished processing element. It is possible this could be <c>null</c> if a record sent for
                 processing no longer exists or is not applicable to the processing criteria.
                 <para>It is also possible this could be provided more than once if the respective element generated multiple rows.</para></param>
      <param name="fieldData"> The resulting/source inner data entry (depending on the context direction) from the processing of
                 <paramref name="element" />. </param>
      <param name="stopProcessingFields"> Contains a list of key values from <paramref name="fieldData" /> which are no longer being
                 processed. Adding or removing entries to/from this list re-enables or stops processing, respectively on those fields for
                 all subsequent records.
                 <para>When a key value is in this list behavior can differ based on the <see cref="T:eVolve.Core.Revit.Integration.ProfileDirection" />:</para><list type="bullet"><item><see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Export" />: future result values for those fields will be <c>null</c></item><item><see cref="F:eVolve.Core.Revit.Integration.ProfileDirection.Import" />: future <see cref="T:Autodesk.Revit.DB.Element" />s will skip this field when processing</item></list></param>
      <remarks>
             This method can be used to conditionally stop processing, perform detailed logging, or as a mechanism for progress indicators.
             </remarks>
    </member>
    <member name="T:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys">
      <summary> (Serializable) a special parameter name keys. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Element_Id">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.Element.Id" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Element_InLinkedModel">
      <summary> (Immutable) Resolves to a value indicating whether the source <see cref="T:Autodesk.Revit.DB.Element" /> is within a linked model. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Element_IsNested">
      <summary> (Immutable) Resolves to a value indicating whether the source <see cref="T:Autodesk.Revit.DB.Element" /> is nested. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Element_LinkedModelSource">
      <summary>
            (Immutable) Resolves to the path to the linked model containing the source <see cref="T:Autodesk.Revit.DB.Element" />.
            <para>This will be blank if it is within the main model.</para></summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Element_UniqueId">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.Element.UniqueId" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Element_Weight">
      <summary> (Immutable) Resolves to the weight of the source <see cref="T:Autodesk.Revit.DB.Element" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Element_X">
      <summary>
            (Immutable) Resolves to the respective <see cref="T:Autodesk.Revit.DB.XYZ" /> coordinate point.
            <para>The calculation used depends upon the type of the source <see cref="T:Autodesk.Revit.DB.Element" />.</para></summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Element_Y">
      <summary>
            (Immutable) Resolves to the respective <see cref="T:Autodesk.Revit.DB.XYZ" /> coordinate point.
            <para>The calculation used depends upon the type of the source <see cref="T:Autodesk.Revit.DB.Element" />.</para></summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Element_Z">
      <summary>
            (Immutable) Resolves to the respective <see cref="T:Autodesk.Revit.DB.XYZ" /> coordinate point.
            <para>The calculation used depends upon the type of the source <see cref="T:Autodesk.Revit.DB.Element" />.</para></summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.eVolve_ProductVersion">
      <summary> (Immutable) Resolves to the product version of the executing eVolve plugin. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.eVolve_RevitVersion">
      <summary> (Immutable) Resolves to the executing Revit version. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.eVolve_Timestamp">
      <summary> (Immutable) Resolves to the timestamp when of the process was started. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.eVolve_WindowsUserName">
      <summary> (Immutable) Resolves to <see cref="P:System.Environment.UserName" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.eVolve_WorkstationName">
      <summary> (Immutable) Resolves to <see cref="P:System.Environment.MachineName" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.FabAncillary_Depth">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.FabricationAncillaryUsage.AncillaryDepth" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.FabAncillary_Description">
      <summary> (Immutable) Resolves according to the output of <see cref="P:eVolve.Core.Revit.Integration.API.ResolveFabAncillaryDescription" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.FabAncillary_Id">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.FabricationAncillaryUsage.AncillaryId" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.FabAncillary_Length">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.FabricationAncillaryUsage.Length" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.FabAncillary_ProductCode">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.FabricationAncillaryUsage.ProductCode" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.FabAncillary_Quantity">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.FabricationAncillaryUsage.Quantity" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.FabAncillary_Type">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.FabricationAncillaryUsage.Type" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.FabAncillary_UsageType">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.FabricationAncillaryUsage.UsageType" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.FabAncillary_WidthDiameter">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.FabricationAncillaryUsage.AncillaryWidthOrDiameter" />. </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.GetSpecialParameterNameDataType(System.String)">
      <summary> Gets the data type for the respective <see cref="P:eVolve.Core.Revit.Integration.API.SpecialParameterNamesLookup" /> value. </summary>
      <param name="key"> Key value from <see cref="T:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys" />. </param>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.GetSpecialParameterNameUnitType(System.String)">
      <summary> Gets the <see cref="T:Asti.Autodesk.Revit.UnitWrapper" /> for the respective <see cref="P:eVolve.Core.Revit.Integration.API.SpecialParameterNamesLookup" /> value. </summary>
      <param name="key"> Key value from <see cref="T:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys" />. </param>
    </member>
    <member name="M:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.IsFabAncillaryKey(System.String)">
      <summary> Returns if <paramref name="key" /> is for a fab ancillary. </summary>
      <param name="key"> Key value from <see cref="T:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys" />. </param>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_Address">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.Address" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_Author">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.Author" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_BuildingName">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.BuildingName" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_ClientName">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.ClientName" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_FileName">
      <summary> (Immutable) Resolves to the file name of <see cref="P:Autodesk.Revit.DB.Document.PathName" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_FilePath">
      <summary> (Immutable) Resolves to the full directory path of <see cref="P:Autodesk.Revit.DB.Document.PathName" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_IssueDate">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.IssueDate" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_Name">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.Name" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_Number">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.Number" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_OrgDescription">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.OrganizationDescription" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_OrgName">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.OrganizationName" />. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.SpecialParameterNameKeys.Project_Status">
      <summary> (Immutable) Resolves to <see cref="P:Autodesk.Revit.DB.ProjectInfo.Status" />. </summary>
    </member>
    <member name="T:eVolve.Core.Revit.Integration.API.UnmappedFieldAction">
      <summary>
            Defines actions to take when data is provided for a header with no matching <see cref="P:eVolve.Core.Revit.Integration.DataProfileFieldDefinition.ColumnName" />.
            </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.UnmappedFieldAction.Error">
      <summary> An error/exception should be generated. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.API.UnmappedFieldAction.Ignore">
      <summary> The field should be ignored and processing continues. </summary>
    </member>
    <member name="T:eVolve.Core.Revit.Integration.DataType">
      <summary> Data type storage options. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.DataType.Autodetect">
      <summary> Autodetermine the type based on defined properties. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.DataType.Boolean">
      <summary> True/False value. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.DataType.Decimal">
      <summary> Numeric with decimals. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.DataType.Integer">
      <summary> Whole numbers only. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.DataType.Text">
      <summary> Text string. </summary>
    </member>
    <member name="T:eVolve.Core.Revit.Integration.ProfileDirection">
      <summary> Profile directions. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.ProfileDirection.Export">
      <summary> Data is extracted out of Revit. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.ProfileDirection.Import">
      <summary> Data is imported into Revit. </summary>
    </member>
    <member name="T:eVolve.Core.Revit.Integration.SelectionScope">
      <summary> Options available for filter query selection scope. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.SelectionScope.Project">
      <summary> Entire project. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.SelectionScope.View">
      <summary> Current view. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.SelectionScope.Selection">
      <summary> Current selection. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Integration.SelectionScope.Prompt">
      <summary> Prompt the user to choose an option when executing. </summary>
    </member>
    <member name="T:eVolve.Core.Revit.ProductInfo.API">
      <summary> Defines externally available API calls. </summary>
    </member>
    <member name="P:eVolve.Core.Revit.ProductInfo.API.IsLicensed">
      <summary> Returns whether or not this product is licensed. </summary>
      <remarks> If <c>false</c> is returned then calls within the API may fail. </remarks>
    </member>
    <member name="P:eVolve.Core.Revit.ProductInfo.API.IsOnline">
      <summary> Returns whether or not this product is currently online with the licensing service. </summary>
    </member>
    <member name="P:eVolve.Core.Revit.ProductInfo.API.ProductName">
      <summary> Returns the name of this product. </summary>
    </member>
    <member name="P:eVolve.Core.Revit.ProductInfo.API.ProductVersion">
      <summary> Returns the currently executing version of the this product. </summary>
    </member>
    <member name="T:eVolve.Core.Revit.Reporting.API">
      <summary> Defines externally available API calls. </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Reporting.API.GetLastUpdated(Autodesk.Revit.DB.Document,System.String)">
      <summary>
             Gets the timestamp of the last update made to the <see cref="P:eVolve.Core.Revit.Reporting.TableInfo.DataTable" /> with the provided
             <paramref name="tableName" />.
             </summary>
      <param name="document"> Revit document to query. </param>
      <param name="tableName"> Name of the table to search for. </param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Thrown when <paramref name="tableName" /> is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Reporting.API.GetTable(Autodesk.Revit.DB.Document,System.String,System.String@)">
      <summary> Gets the full .NET <see cref="T:System.Data.DataTable" /> with the provided <paramref name="name" />. </summary>
      <param name="document"> Revit document to pull the data from. </param>
      <param name="name"> The name of the table to pull. Use <see cref="M:eVolve.Core.Revit.Reporting.API.GetTableNames(Autodesk.Revit.DB.Document)" /> for a current list of valid entries. </param>
      <param name="metadata"> [out] Defined <see cref="P:eVolve.Core.Revit.Reporting.TableInfo.Metadata" /> (if any) associated with the return value. </param>
      <remarks>
             The return value of this method should be treated as though it is read-only. If you need to make modifications to the return
             value, use <see cref="M:System.Data.DataTable.Copy" /> on the result first.
             </remarks>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Thrown when <paramref name="name" /> is not found. </exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Reporting.API.GetTableNames(Autodesk.Revit.DB.Document)">
      <summary>
             Returns the sorted names of all available <see cref="T:eVolve.Core.Revit.Reporting.TableInfo" /> in the specified <paramref name="document" />.
             </summary>
      <param name="document"> Revit document to query. </param>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="P:eVolve.Core.Revit.Reporting.API.IsLicensed">
      <summary> Returns whether or not this product is licensed. </summary>
      <remarks> If <c>false</c> is returned then calls within the API may fail. </remarks>
    </member>
    <member name="M:eVolve.Core.Revit.Reporting.API.OpenTablesConfigurationDialog(Autodesk.Revit.DB.Document)">
      <summary> Opens the dialog used for editing <see cref="T:eVolve.Core.Revit.Reporting.TableInfo" />s as a modal window. </summary>
      <param name="document"> Revit document containing the data to view. </param>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Reporting.API.SaveTable(Autodesk.Revit.DB.Document,System.String,System.String,System.Boolean,System.Data.DataTable,System.String)">
      <summary>
             Creates a new <see cref="T:eVolve.Core.Revit.Reporting.TableInfo" /> record named <paramref name="name" /> within <see cref="T:eVolve.Core.Revit.Reporting.TablesConfigurationData" />. If a
             record with the provided <paramref name="name" /> already exists, it is overwritten with the information provided.
             <para>This method will create a <see cref="T:Autodesk.Revit.DB.Transaction" /> as needed.</para></summary>
      <param name="document"> Revit document to receive the data. </param>
      <param name="name"> Table name to create or update. </param>
      <param name="description"> Sets the table description. For existing tables, if <c>null</c> is provided then the description
                 is left as-is. </param>
      <param name="isReadOnly"> Specifies if this data is intended to be read only. </param>
      <param name="data"> Complete .NET <see cref="T:System.Data.DataTable" /> to set for the entry. </param>
      <param name="metadata"> Metadata which is to be associated with the table. This is returned via <see cref="M:eVolve.Core.Revit.Reporting.API.GetTable(Autodesk.Revit.DB.Document,System.String,System.String@)" /> and
                 can be used to assist with processing. </param>
      <exception cref="T:System.FieldAccessException"> Thrown when the data cannot be updated because it is currently worksharing checked
                 out by another user. </exception>
      <exception cref="T:System.UnauthorizedAccessException"> Thrown when the product is not licensed. </exception>
    </member>
    <member name="T:eVolve.Core.Revit.Spooling.API">
      <summary> Defines externally available API calls. </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Spooling.API.GetSpoolStatus(Autodesk.Revit.DB.Element)">
      <summary> Gets the value of <see cref="P:eVolve.Core.Revit.Spooling.API.StatusParameterName" /> on the provided <paramref name="element" />. </summary>
      <param name="element"> The element to retrieve the value from. </param>
      <remarks>
             This can be applicable to a type other than <see cref="T:Autodesk.Revit.DB.AssemblyInstance" /> as this value could be applied to member
             parts as well.
             </remarks>
    </member>
    <member name="M:eVolve.Core.Revit.Spooling.API.GetSpoolStatusDefinitionNames(Autodesk.Revit.DB.Document)">
      <summary>
             Returns the sorted names of all defined Status values within the <see cref="T:eVolve.Core.Revit.Spooling.SpoolingConfigurationDataBase" /> in the specified
             <paramref name="document" />.
             </summary>
      <param name="document"> Revit document to query. </param>
    </member>
    <member name="M:eVolve.Core.Revit.Spooling.API.SetSpoolStatus(Autodesk.Revit.DB.AssemblyInstance,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.Element})">
      <summary>
             Sets the <see cref="P:eVolve.Core.Revit.Spooling.API.StatusParameterName" /> to <paramref name="status" /> for the provided <paramref name="spool" /> and returns
             if it was assigned without error.
             <para>The return value is only with respect to assignment to <paramref name="spool" /> itself. If <paramref name="pushToParts" />
             is <see langword="true" /> and assignment fails on any members, this will not impact the return value.</para></summary>
      <param name="spool"> The spool to set the status of. </param>
      <param name="status"> Value to set to <see cref="P:eVolve.Core.Revit.Spooling.API.StatusParameterName" />. </param>
      <param name="pushToParts"> (Optional) <summary>
            Indicates whether parameter value updates should be applied to spool and parts (<see langword="true" />)
            or to the spool only (<see langword="false" />).
            </summary>.
                 <para>If this is not provided, the current <see cref="T:eVolve.Core.Revit.Spooling.SpoolingConfigurationDataBase" /> is loaded and the value is read
                 from it.</para></param>
      <param name="elements"> (Optional) Only used when <paramref name="pushToParts" /> is <see langword="true" />.
                 <para>If provided, uses this list as the parts to also assign <see cref="P:eVolve.Core.Revit.Spooling.API.StatusParameterName" />. If not provided, the
                 members of <paramref name="spool" /> are retrieved.</para></param>
      <remarks> This method will create a <see cref="T:Autodesk.Revit.DB.Transaction" /> as needed. </remarks>
    </member>
    <member name="T:eVolve.Core.Revit.Utilities.API">
      <summary> Defines externally available API calls. </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.API.PublishToExporter(Autodesk.Revit.DB.View,eVolve.Core.Revit.Utilities.IModelDataExportDestination,System.String,eVolve.Core.Revit.Utilities.API.ModelDataExportFormat,System.String[]@)">
      <summary>
             Publishes the specified <paramref name="view" /> to the provided <paramref name="exportDestination" /> using the options
             provided. Returns if the operation succeeded with any unexpected errors being thrown.
             <para>This operation is self-contained in that it will perform the full publish process (initialization and finalization
             included) defined by <paramref name="exportDestination" /> during publish.</para></summary>
      <param name="view"> The Revit view to publish. </param>
      <param name="exportDestination"> Object which will process the <paramref name="view" /> output being published. </param>
      <param name="exportLocation"> Destination location value which is understood by <paramref name="exportDestination" />.
                 <para>This would be a value which <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" /> would return from user
                 configuration.</para></param>
      <param name="exportFormat"> Export format from Revit. </param>
      <param name="messages"> [out] List of messages which were returned from calls to <paramref name="exportDestination" /> during
                 processing. </param>
      <exception cref="T:System.Exception"> Thrown when the process, unexpectedly, does not complete successfully. </exception>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.API.RegisterModelDataExportDestination``1">
      <summary>
             Registers an entry which will be available for users to select when defining an <see cref="T:eVolve.Core.Revit.Utilities.ExportDestination" /> within
             <see cref="T:eVolve.Core.Revit.Utilities.Forms.ExportUtilityDialog" />.
             <para>If an existing entry with the same <see cref="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.Name" /> already exists, it is automatically
             unregistered prior to registering the provided <typeparamref name="T" />.</para></summary>
      <typeparam name="T"> Concrete implementation of <see cref="T:eVolve.Core.Revit.Utilities.IModelDataExportDestination" /> which contains a parameterless
                 constructor. </typeparam>
      <remarks>
             Note that this method is available after the eVolve Revit addin is loaded. It is important to understand the order Revit will
             load addin files such that this method will be available when called at runtime.
             </remarks>
      <exception cref="T:System.ArgumentException"> Thrown when <see cref="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.Name" /> does not have a value. </exception>
    </member>
    <member name="P:eVolve.Core.Revit.Utilities.API.SupportsMajStatusUpdates">
      <summary>
            Returns whether <see cref="M:eVolve.Core.Revit.Utilities.API.TryExportToMaj(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.Element},System.Boolean,System.String,System.Collections.Generic.HashSet{Autodesk.Revit.DB.ElementId}@,System.String)" /> supports updating <see cref="P:Autodesk.Revit.DB.FabricationPart.PartStatus" /> values.
            </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.API.TryExportToMaj(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.Element},System.Boolean,System.String,System.Collections.Generic.HashSet{Autodesk.Revit.DB.ElementId}@,System.String)">
      <summary>
             Attempts to export the provided <paramref name="partsToExport" /> to an MAJ file and returns if the export operation was
             performed against any items successfully.
             </summary>
      <param name="partsToExport">
        <param name="partsToExport"> Parts within a common <see cref="T:Autodesk.Revit.DB.Document" /> to be exported. </param>
        <para>Any non-<see cref="T:Autodesk.Revit.DB.FabricationPart" />s are automatically filtered out.</para>
      </param>
      <param name="includeTaps"> Specifies if tap/dynamic hole information should be included within the export. </param>
      <param name="saveFilePath">
        <param name="saveFilePath"> Path to save the file to. Depending on what is provided, the behavior is controlled:
                 <list type="bullet"><item>Full file path = This path is used with no interaction required.</item><item>File name only = The user is prompted for save location with this value as the default file name.</item><item><see langword="null" />/blank = The user is prompted for save location.</item></list></param>
      </param>
      <param name="exportedIds"> [out] List of <see cref="T:Autodesk.Revit.DB.ElementId" />s which were successfully exported. </param>
      <param name="updateStatus"> (Optional) As applicable, attempts to update each <paramref name="partsToExport" /> item's
                 'Status' to the specified value.
                 <para>This is only applicable when <see cref="P:eVolve.Core.Revit.Utilities.API.SupportsMajStatusUpdates" /> returns <see langword="true" />, otherwise this
                 update will not occur.</para></param>
      <remarks> If exceptions are encountered by the operation, they are thrown. </remarks>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.API.TryExportToPcf(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.Element},System.String)">
      <summary>
             Attempts to export the provided <paramref name="partsToExport" /> to an PCF file and returns if the export operation was
             performed successfully.
             </summary>
      <param name="partsToExport"> Parts within a common <see cref="T:Autodesk.Revit.DB.Document" /> to be exported. </param>
      <param name="saveFilePath"> Path to save the file to. Depending on what is provided, the behavior is controlled:
                 <list type="bullet"><item>Full file path = This path is used with no interaction required.</item><item>File name only = The user is prompted for save location with this value as the default file name.</item><item><see langword="null" />/blank = The user is prompted for save location.</item></list></param>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.API.UnregisterModelDataExportDestination(System.String)">
      <summary>
             Removes an entry which was created by <see cref="M:eVolve.Core.Revit.Utilities.API.RegisterModelDataExportDestination``1" /> such that the user can no longer
             select it.
             </summary>
      <param name="id">
        <see cref="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.Id" /> value of the entry to be removed. If this does not exist,
                 nothing happens. </param>
    </member>
    <member name="T:eVolve.Core.Revit.Utilities.API.ModelDataExportFormat">
      <summary> Export formats supported. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Utilities.API.ModelDataExportFormat.DWG">
      <summary> DWG file format. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Utilities.API.ModelDataExportFormat.DWF">
      <summary> DWF file format. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Utilities.API.ModelDataExportFormat.DXF">
      <summary> DXF file format. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Utilities.API.ModelDataExportFormat.IFC">
      <summary> IFC file format. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Utilities.API.ModelDataExportFormat.NWC">
      <summary> NavisWorks file format. </summary>
    </member>
    <member name="F:eVolve.Core.Revit.Utilities.API.ModelDataExportFormat.PDF">
      <summary> PDF file format. </summary>
    </member>
    <member name="T:eVolve.Core.Revit.Utilities.IModelDataExportDestination">
      <summary>
            Defines a publish endpoint used by <see cref="T:eVolve.Core.Revit.Utilities.ExportDestination" />s.
            <para>An implementation must define how a user configures an individual entry as well as how that entry processes files.</para><para>To make available for consumption, implementers should call <see cref="M:eVolve.Core.Revit.Utilities.API.RegisterModelDataExportDestination``1" /> so the
            application is aware of its availability.</para></summary>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.FinalizePublish(Autodesk.Revit.DB.Document,System.String@)">
      <summary>
             Called after all files have been published. This method can be used to give feedback or perform any final cleanup from the
             execution process.
             </summary>
      <param name="document"> The current Revit document. </param>
      <param name="location"> Value previously configured by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" />. </param>
      <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)">
      <summary>
             Prompts the user to pick a destination location and returns the selection. If no selection is made, <see langword="null" />
             should be returned.
             <para>The return value does not need to be human readable (this will be handled by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocationDisplay(Autodesk.Revit.DB.Document,System.String,System.String@)" />). It
             should be in a format that can be provided later for consumption.</para></summary>
      <param name="owner"> The owning dialog which is calling this method. </param>
      <param name="document"> The current Revit document. </param>
      <param name="existingLocation"> An existing location previously returned by a call to this method. This will be provided if
                 the user is editing an existing entry. If it is a new entry, this value will be <see langword="null" />. </param>
      <remarks>
             This method can create its own UI as needed. Execution of the caller is paused until this method is complete.
             </remarks>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocationDisplay(Autodesk.Revit.DB.Document,System.String,System.String@)">
      <summary>
             Gets a friendly display value of a previously provided <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" /> value which can be provided to the user.
             <para>An empty return or a value set to <paramref name="errorMessage" /> indicates that <paramref name="location" /> is missing
             or invalid.</para></summary>
      <param name="document"> The current Revit document. </param>
      <param name="location"> Value previously selected by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" /> which defines the destination. It is possible
                 this could be <see langword="null" /> if the user has not yet selected anything. </param>
      <param name="errorMessage"> [out] Detail error message which can be returned to the user. If the entry is valid, this should
                 be set to <see langword="null" />. If a non-<see langword="null" /> value is set, the entry is considered invalid. </param>
    </member>
    <member name="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.Id">
      <summary>
            Gets the unique identifier which identifies this source.
            <para>This should be unique and not collide with the values of any other <see cref="T:eVolve.Core.Revit.Utilities.IModelDataExportDestination" />
            implementations.</para></summary>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.InitializePublish(Autodesk.Revit.DB.Document,System.String,System.String@)">
      <summary>
             Prepares this object for the publishing process and returns if everything is ready to go. A return value of <see langword="false" />
             will prevent publishing to this object.
             <para>This method is called once before file publishing begins and can be used to prepare the environment before calls to
             <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.PublishFile(Autodesk.Revit.DB.Document,System.String,System.String,System.String,System.String@)" /> are made.</para></summary>
      <param name="document"> The current Revit document. </param>
      <param name="location"> Value previously configured by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" />. </param>
      <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param>
    </member>
    <member name="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifiesViewForAllExporters">
      <summary>
            Controls when <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifyViewBeforeGeneration(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,System.Nullable{eVolve.Core.Revit.Utilities.API.ModelDataExportFormat},System.String@)" /> and <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifyViewAfterPublish(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,System.Nullable{eVolve.Core.Revit.Utilities.API.ModelDataExportFormat},System.String@)" /> should be called when
            processing <see cref="T:Autodesk.Revit.DB.View" />s.
            <list type="bullet"><item><see langword="true" /> = Methods are called before and after (respectively) exporters are processed such that any
            modifications made by this object are picked up by all. </item><item><see langword="false" /> = Methods are called immediately before and after (respectively) this exporter so that any
            modifications are only applicable to this object.</item></list>
            If this object never modifies <see cref="T:Autodesk.Revit.DB.View" />s before they are exported, this should return <see langword="false" />.
            </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifyViewAfterPublish(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,System.Nullable{eVolve.Core.Revit.Utilities.API.ModelDataExportFormat},System.String@)">
      <summary>
             Called after the output of the <paramref name="view" /> has been published by this module and returns if <paramref name="view" />
             was modified by this method.
             <para>This method's actions should be in consideration of the implementation's <see cref="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifiesViewForAllExporters" />.</para><para>If this implementation does not modify the sheet, it should return <see langword="false" />.</para><para>This method should handle its own exceptions and prevent them from bubbling up.</para></summary>
      <param name="document"> The Revit document which contains <paramref name="view" />. </param>
      <param name="view"> The <see cref="F:Autodesk.Revit.DB.BuiltInCategory.OST_Sheets" /> or <see cref="F:Autodesk.Revit.DB.BuiltInCategory.OST_Views" />
                 object currently being processed. </param>
      <param name="exportFormat"> The target export format. This will be <see langword="null" /> if <see cref="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifiesViewForAllExporters" />
                 is <see langword="true" />. </param>
      <param name="message">
        <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param>
      </param>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifyViewBeforeGeneration(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,System.Nullable{eVolve.Core.Revit.Utilities.API.ModelDataExportFormat},System.String@)">
      <summary>
             Called before the output of the <paramref name="view" /> is generated and returns if <paramref name="view" /> was modified by
             this method.
             <para>If this implementation does not modify the sheet, it should return <see langword="false" />.</para><para>This method should handle its own exceptions and prevent them from bubbling up.</para></summary>
      <param name="document"> The Revit document which contains <paramref name="view" />. </param>
      <param name="view"> The <see cref="F:Autodesk.Revit.DB.BuiltInCategory.OST_Sheets" /> or <see cref="F:Autodesk.Revit.DB.BuiltInCategory.OST_Views" />
                 object currently being processed. </param>
      <param name="exportFormat"> The target export format. This will be <see langword="null" /> if <see cref="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifiesViewForAllExporters" />
                 is <see langword="true" />. </param>
      <param name="message">
        <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param>
      </param>
    </member>
    <member name="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.Name">
      <summary> Gets the display name of this export source. </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.PublishFile(Autodesk.Revit.DB.Document,System.String,System.String,System.String,System.String@)">
      <summary>
             Processes the provided <paramref name="file" /> by publishing to <paramref name="location" /> and returning if the operation
             was successful.
             </summary>
      <param name="document"> The current Revit document. </param>
      <param name="uniqueId"> The Revit <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> which sourced the <paramref name="file" /> being processed.
                 <para>This can be used to retrieve additional details about the record from Revit if it is needed for processing.</para></param>
      <param name="location"> The non-<see langword="null" /> location value previously selected by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" /> which
                 defines the destination. </param>
      <param name="file"> Full path to the file which is to be published. </param>
      <param name="message"> [in,out] <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param></param>
    </member>
    <member name="T:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination">
      <summary> Processor for publishing to Windows folders. </summary>
      <remarks>
        <returns> Location storage value is a Windows folder path. </returns>
      </remarks>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.#ctor"></member>
    <member name="M:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.FinalizePublish(Autodesk.Revit.DB.Document,System.String@)">
      <summary>
             Called after all files have been published. This method can be used to give feedback or perform any final cleanup from the
             execution process.
             </summary>
      <param name="document"> The current Revit document. </param>
      <param name="location"> Value previously configured by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" />. </param>
      <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)">
      <summary>
             Prompts the user to pick a destination location and returns the selection. If no selection is made, <see langword="null" />
             should be returned.
             <para>The return value does not need to be human readable (this will be handled by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocationDisplay(Autodesk.Revit.DB.Document,System.String,System.String@)" />). It
             should be in a format that can be provided later for consumption.</para></summary>
      <param name="owner"> The owning dialog which is calling this method. </param>
      <param name="document"> The current Revit document. </param>
      <param name="existingLocation"> An existing location previously returned by a call to this method. This will be provided if
                 the user is editing an existing entry. If it is a new entry, this value will be <see langword="null" />. </param>
      <returns> Location storage value is a Windows folder path. </returns>
      <remarks>
             This method can create its own UI as needed. Execution of the caller is paused until this method is complete.
             </remarks>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.GetLocationDisplay(Autodesk.Revit.DB.Document,System.String,System.String@)">
      <summary>
             Gets a friendly display value of a previously provided <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" /> value which can be provided to the user.
             <para>An empty return or a value set to <paramref name="errorMessage" /> indicates that <paramref name="location" /> is missing
             or invalid.</para></summary>
      <param name="document"> The current Revit document. </param>
      <param name="location"> Value previously selected by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" /> which defines the destination. It is possible
                 this could be <see langword="null" /> if the user has not yet selected anything. </param>
      <param name="errorMessage"> [out] Detail error message which can be returned to the user. If the entry is valid, this should
                 be set to <see langword="null" />. If a non-<see langword="null" /> value is set, the entry is considered invalid. </param>
    </member>
    <member name="P:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.Id">
      <summary>
            Gets the unique identifier which identifies this source.
            <para>This should be unique and not collide with the values of any other <see cref="T:eVolve.Core.Revit.Utilities.IModelDataExportDestination" />
            implementations.</para></summary>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.InitializePublish(Autodesk.Revit.DB.Document,System.String,System.String@)">
      <summary>
             Prepares this object for the publishing process and returns if everything is ready to go. A return value of <see langword="false" />
             will prevent publishing to this object.
             <para>This method is called once before file publishing begins and can be used to prepare the environment before calls to
             <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.PublishFile(Autodesk.Revit.DB.Document,System.String,System.String,System.String,System.String@)" /> are made.</para></summary>
      <param name="document"> The current Revit document. </param>
      <param name="location"> Value previously configured by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" />. </param>
      <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param>
    </member>
    <member name="P:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.ModifiesViewForAllExporters">
      <summary>
            Controls when <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifyViewBeforeGeneration(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,System.Nullable{eVolve.Core.Revit.Utilities.API.ModelDataExportFormat},System.String@)" /> and <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifyViewAfterPublish(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,System.Nullable{eVolve.Core.Revit.Utilities.API.ModelDataExportFormat},System.String@)" /> should be called when
            processing <see cref="T:Autodesk.Revit.DB.View" />s.
            <list type="bullet"><item><see langword="true" /> = Methods are called before and after (respectively) exporters are processed such that any
            modifications made by this object are picked up by all. </item><item><see langword="false" /> = Methods are called immediately before and after (respectively) this exporter so that any
            modifications are only applicable to this object.</item></list>
            If this object never modifies <see cref="T:Autodesk.Revit.DB.View" />s before they are exported, this should return <see langword="false" />.
            </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.ModifyViewAfterPublish(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,System.Nullable{eVolve.Core.Revit.Utilities.API.ModelDataExportFormat},System.String@)">
      <summary>
             Called after the output of the <paramref name="view" /> has been published by this module and returns if <paramref name="view" />
             was modified by this method.
             <para>This method's actions should be in consideration of the implementation's <see cref="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifiesViewForAllExporters" />.</para><para>If this implementation does not modify the sheet, it should return <see langword="false" />.</para><para>This method should handle its own exceptions and prevent them from bubbling up.</para></summary>
      <param name="document"> The Revit document which contains <paramref name="view" />. </param>
      <param name="view"> The <see cref="F:Autodesk.Revit.DB.BuiltInCategory.OST_Sheets" /> or <see cref="F:Autodesk.Revit.DB.BuiltInCategory.OST_Views" />
                 object currently being processed. </param>
      <param name="exportFormat"> The target export format. This will be <see langword="null" /> if <see cref="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifiesViewForAllExporters" />
                 is <see langword="true" />. </param>
      <param name="message">
        <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param>
      </param>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.ModifyViewBeforeGeneration(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,System.Nullable{eVolve.Core.Revit.Utilities.API.ModelDataExportFormat},System.String@)">
      <summary>
             Called before the output of the <paramref name="view" /> is generated and returns if <paramref name="view" /> was modified by
             this method.
             <para>If this implementation does not modify the sheet, it should return <see langword="false" />.</para><para>This method should handle its own exceptions and prevent them from bubbling up.</para></summary>
      <param name="document"> The Revit document which contains <paramref name="view" />. </param>
      <param name="view"> The <see cref="F:Autodesk.Revit.DB.BuiltInCategory.OST_Sheets" /> or <see cref="F:Autodesk.Revit.DB.BuiltInCategory.OST_Views" />
                 object currently being processed. </param>
      <param name="exportFormat"> The target export format. This will be <see langword="null" /> if <see cref="P:eVolve.Core.Revit.Utilities.IModelDataExportDestination.ModifiesViewForAllExporters" />
                 is <see langword="true" />. </param>
      <param name="message">
        <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param>
      </param>
    </member>
    <member name="P:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.Name">
      <summary> Gets the display name of this export source. </summary>
    </member>
    <member name="M:eVolve.Core.Revit.Utilities.WindowFolderModelDataExportDestination.PublishFile(Autodesk.Revit.DB.Document,System.String,System.String,System.String,System.String@)">
      <summary>
             Processes the provided <paramref name="file" /> by publishing to <paramref name="location" /> and returning if the operation
             was successful.
             </summary>
      <param name="document"> The current Revit document. </param>
      <param name="uniqueId"> The Revit <see cref="P:Autodesk.Revit.DB.Element.UniqueId" /> which sourced the <paramref name="file" /> being processed.
                 <para>This can be used to retrieve additional details about the record from Revit if it is needed for processing.</para></param>
      <param name="location"> The non-<see langword="null" /> location value previously selected by <see cref="M:eVolve.Core.Revit.Utilities.IModelDataExportDestination.GetLocation(System.Windows.Forms.IWin32Window,Autodesk.Revit.DB.Document,System.String)" /> which
                 defines the destination. </param>
      <param name="file"> Full path to the file which is to be published. </param>
      <param name="message"> [in,out] <param name="message"> [in,out] If a non-empty value is returned, this is logged. This can be used to send back information
                 which may be relevant for troubleshooting. </param></param>
    </member>
  </members>
</doc>